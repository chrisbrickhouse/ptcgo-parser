const PTCGOParser = require('../lib/index.js')

const pick = (decklist, card_name) =>
  decklist.cards.filter((card) => card.name === card_name)[0]

const exported_list = `****** Pokémon Trading Card Game Deck List ******

##Pokémon - 13

* 1 Oranguru SUM 113
* 3 Darkrai-EX BKP 74
* 4 Dratini SUM 94
* 3 Dragonair SUM 95
* 1 Dragonite ROS 51
* 1 Mew FAC 29

##Trainer Cards - 32

* 1 Fighting Fury Belt BKP 99
* 2 Ace Trainer AOR 69
* 4 Trainers' Mail ROS 92
* 2 Lillie SUM 122
* 3 Professor's Letter BKT 146
* 1 Super Rod BKT 149
* 2 Lysandre AOR 78
* 3 Professor Sycamore BKP 107
* 1 Lucky Helmet AOR 77
* 1 Switch SUM 132
* 1 Fisherman BKT 136
* 1 Escape Rope PRC 127
1 Special Charge STS 105
* 1 VS Seeker ROS 110
* 3 Ultra Ball SUM 135
* 1 N FAC 105
* 2 Float Stone BKT 137
* 2 Level Ball NXD 89

##Energy - 15

* 4 Double Dragon Energy ROS 97
* 11 Darkness Energy  7
* 4 Water Energy XYEnergy 9

Total Cards - 60

****** Deck List Generated by the Pokémon TCG Online www.pokemon.com/TCGO ******`

const promo_deck = `
****** Pokémon Trading Card Game Deck List ******

##Pokémon - 2
* 1 Tapu Koko PR-SM 30
* 1 Jirachi PR-XY 67

##Trainer Cards - 0
##Energy - 0
Total Cards - 2
****** Deck List Generated by the Pokémon TCG Online www.pokemon.com/TCGO ******
`

const swsh_promo_and_gallery_deck = `
Pokemon - 18
1 Blastoise VMAX PR-SW 103
1 Mew CRZ 10
3 Rowlet SHF 1
2 Galarian Moltres V ASR 20
1 Eevee BRS 11
1 Castform LOR 11
2 Kricketot CRZ 10
3 Yanma SHF 1
2 Dartrix ASR 20
1 Mothim BRS 11
1 Seedot LOR 11

Trainer - 1
1 Professor Burnet SIT TG26

Energy - 41
50 Water Energy 90
****** Deck List Generated by PokemonCard.io ******
`

const energies_deck = `
* 1 Darkness Energy
* 1 Fairy Energy
* 1 Fighting Energy
* 1 Fire Energy
* 1 Grass Energy
* 1 Lightning Energy
* 1 Metal Energy
* 1 Psychic Energy
* 1 Water Energy
`

const cardname = `Pidgey FLF 75`

describe('ptcgo-parser', () => {
  it('should ignore headlines', () => {
    const decklist = PTCGOParser.parse(exported_list)
    const header_items = decklist.cards.filter((item) =>
      item.name.startsWith('##')
    )

    expect(header_items.length).toBe(0)
  })

  it('should parse Oranguru correctly', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const oranguru = pick(decklist, 'Oranguru')

    expect(oranguru.name).toBe('Oranguru')
    expect(oranguru.amount).toBe('1')
    expect(oranguru.set).toBe('SUM')
    expect(oranguru.code).toBe('113')
  })

  it('should work with cards without leading asterisk', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const card = pick(decklist, 'Special Charge')

    expect(card.name).toBe('Special Charge')
    expect(card.amount).toBe('1')
    expect(card.set).toBe('STS')
    expect(card.code).toBe('105')
  })

  it('should parse correctly basic energy without set code', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const card = pick(decklist, 'Darkness')

    expect(card.name).toBe('Darkness')
    expect(card.amount).toBe('11')
    expect(card.set).toBe(undefined)
    expect(card.code).toBe(undefined)
  })

  it('should parse correctly basic energy with a set code', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const card = pick(decklist, 'Water')

    expect(card.name).toBe('Water')
    expect(card.amount).toBe('4')
    expect(card.set).toBe(undefined)
    expect(card.code).toBe(undefined)
  })

  it('should parse correctly special energy with a set code', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const card = pick(decklist, 'Double Dragon Energy')

    expect(card.name).toBe('Double Dragon Energy')
    expect(card.amount).toBe('4')
    expect(card.set).toBe('ROS')
    expect(card.code).toBe('97')
  })

  it('should parse correctly SM promo', () => {
    const decklist = PTCGOParser.parse(promo_deck)

    const card = pick(decklist, 'Tapu Koko')

    expect(card.name).toBe('Tapu Koko')
    expect(card.amount).toBe('1')
    expect(card.set).toBe('PR-SM')
    expect(card.code).toBe('30')
  })

  it('should parse correctly XY promo', () => {
    const decklist = PTCGOParser.parse(promo_deck)

    const card = pick(decklist, 'Jirachi')

    expect(card.name).toBe('Jirachi')
    expect(card.amount).toBe('1')
    expect(card.set).toBe('PR-XY')
    expect(card.code).toBe('67')
  })

  it('should match PTCGO set code to ptcgo.io id correctly', () => {
    const decklist = PTCGOParser.parse(exported_list)

    const card = pick(decklist, 'Double Dragon Energy')

    expect(card.name).toBe('Double Dragon Energy')
    expect(card.set).toBe('ROS')
    expect(card.ptcgoio.id).toBe('xy6-97')
  })
})

it('should match promo PTCGO set code to ptcgo.io id correctly', () => {
  const decklist = PTCGOParser.parse(promo_deck)

  const card = pick(decklist, 'Jirachi')

  expect(card.name).toBe('Jirachi')
  expect(card.set).toBe('PR-XY')
  expect(card.ptcgoio.id).toBe('xyp-XY67')
})

it('should match promo PTCGO set code to ptcgo.io id correctly, part 2', () => {
  const decklist = PTCGOParser.parse(promo_deck)

  const card = pick(decklist, 'Tapu Koko')

  expect(card.name).toBe('Tapu Koko')
  expect(card.set).toBe('PR-SM')
  expect(card.ptcgoio.id).toBe('smp-SM30')
})

it('should match SWSH promo PTCGO set code to ptcgo.io id correctly', () => {
  const decklist = PTCGOParser.parse(swsh_promo_and_gallery_deck)
  const card = pick(decklist, 'Blastoise VMAX')
  expect(card.name).toBe('Blastoise VMAX')
  expect(card.ptcgoio.id).toBe('swshp-SWSH103')
})

it('should correctly identify GG, TG, and SV ids', () => {
  const decklist = PTCGOParser.parse(swsh_promo_and_gallery_deck)
  let card = pick(decklist, 'Mew')
  expect(card.name).toBe('Mew')
  expect(card.ptcgoio.id).toBe('swsh12pt5gg-GG10')

  card = pick(decklist, 'Rowlet')
  expect(card.name).toBe('Rowlet')
  expect(card.ptcgoio.id).toBe('swsh45sv-SV001')

  card = pick(decklist, 'Galarian Moltres V')
  expect(card.name).toBe('Galarian Moltres V')
  expect(card.ptcgoio.id).toBe('swsh10tg-TG20')

  card = pick(decklist, 'Eevee')
  expect(card.name).toBe('Eevee')
  expect(card.ptcgoio.id).toBe('swsh9tg-TG11')

  card = pick(decklist, 'Castform')
  expect(card.name).toBe('Castform')
  expect(card.ptcgoio.id).toBe('swsh11tg-TG11')
})

it('should correctly identify the non-TG/GG/SV card sets', () => {
  const decklist = PTCGOParser.parse(swsh_promo_and_gallery_deck)
  let card = pick(decklist, 'Kricketot')
  expect(card.name).toBe('Kricketot')
  expect(card.ptcgoio.id).toBe('swsh12pt5-10')

  card = pick(decklist, 'Yanma')
  expect(card.name).toBe('Yanma')
  expect(card.ptcgoio.id).toBe('swsh45-1')

  card = pick(decklist, 'Dartrix')
  expect(card.name).toBe('Dartrix')
  expect(card.ptcgoio.id).toBe('swsh10-20')

  card = pick(decklist, 'Mothim')
  expect(card.name).toBe('Mothim')
  expect(card.ptcgoio.id).toBe('swsh9-11')

  card = pick(decklist, 'Seedot')
  expect(card.name).toBe('Seedot')
  expect(card.ptcgoio.id).toBe('swsh11-11')
})

it('should handle SilverTempest TG code exports', () => {
  // PokemonCard.io exports Silver Tempest Trainer Gallery cards
  // as having the TG prepended to the number unlike other sets
  // this checks that the card is properly read
  const decklist = PTCGOParser.parse(swsh_promo_and_gallery_deck)
  const card = pick(decklist, 'Professor Burnet')
  expect(card.name).toBe('Professor Burnet')
  expect(card.ptcgoio.id).toBe('swsh12tg-TG26')
})

it('should return an ptcgoio id for a card definition', () => {
	const card_id = PTCGOParser.parseCard(cardname)
	expect(card_id).toBe('xy2-75')
})

it('should use S&M energy ids for basic energies', () => {
  const decklist = PTCGOParser.parse(energies_deck)

  let card = pick(decklist, 'Darkness')
  expect(card.name).toBe('Darkness')
  expect(card.ptcgoio.id).toBe('sm1-170')

  card = pick(decklist, 'Fairy')
  expect(card.name).toBe('Fairy')
  expect(card.ptcgoio.id).toBe('sm1-172')

  card = pick(decklist, 'Fighting')
  expect(card.name).toBe('Fighting')
  expect(card.ptcgoio.id).toBe('sm1-169')

  card = pick(decklist, 'Fire')
  expect(card.name).toBe('Fire')
  expect(card.ptcgoio.id).toBe('sm1-165')

  card = pick(decklist, 'Grass')
  expect(card.name).toBe('Grass')
  expect(card.ptcgoio.id).toBe('sm1-164')

  card = pick(decklist, 'Lightning')
  expect(card.name).toBe('Lightning')
  expect(card.ptcgoio.id).toBe('sm1-167')

  card = pick(decklist, 'Metal')
  expect(card.name).toBe('Metal')
  expect(card.ptcgoio.id).toBe('sm1-171')

  card = pick(decklist, 'Psychic')
  expect(card.name).toBe('Psychic')
  expect(card.ptcgoio.id).toBe('sm1-168')

  card = pick(decklist, 'Water')
  expect(card.name).toBe('Water')
  expect(card.ptcgoio.id).toBe('sm1-166')
})
